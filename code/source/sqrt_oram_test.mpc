execfile('/root/SCALE-MAMBA/Programs/sqrt_oram/sqrt_oram.mpc')
execfile('/root/SCALE-MAMBA/Programs/test_util/test_util.mpc')

testi=0

N=SED_THIS_TO_NUMBER_OF_PLAYERS

if(False): 
  testi = new_test(testi)
  print_ln("Testing get_max_number_of_queries")

  n = 128
  q = sqrt_oram_max_queries(n)

  print_ln("Expect: %s", 6)
  print_ln("Actual: %s", q)


if(True):
  testi = new_test(testi)
  print_ln("Testing sqrt_oram initialization.")

  m = 8
  data_orig = sint.Array(m)

  for i in range(m):
    data_orig[i] = sint(i * i + i + 3)

  n, P, ind, data, s_keys, s_data, s_count = sqrt_oram_init(m, data_orig, N)

  print_ln("n = %s, count= %s", n, s_count)

  for i in range(n):
    print_ln("ind[%s] = %s, data[%s] = %s", i, ind[i].reveal(), i, data[i].reveal())

  d = logOfAPowerOfTwo(n)
  halfD = int(d/2)
  sqrtN = 1 << halfD

  for i in range(N_ROUNDS):
    for j in range(sqrtN):
      print_ln("P[%s][%s] = %s", i, j, P[i][j].reveal())

# Needs previous test to be true for setup
if(True):
  testi = new_test(testi)
  print_ln("Testing sqrt_oram access")
  
  datum, s_keys, s_data, s_count = sqrt_oram_read(5, P, ind, data, s_keys, s_data, s_count, n, m, N)
  
  check(33, datum)
  check(1, s_count)

# Assumes setup has happened in a previous test
if(True):
  testi = new_test(testi)
  print_ln("Test that reshuffling happens")

  q = sqrt_oram_max_queries(n)

  prev_s_count = s_count

  for i in range(10*q + 1):
    datum, s_keys, s_data, s_count = sqrt_oram_read(sint(1), P, ind, data, s_keys, s_data, s_count, n, m, N)

  print_ln("q = %s", q)
  check(((prev_s_count + 10*q ) % q) + 1, s_count)
