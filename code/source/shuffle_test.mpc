execfile('/root/SCALE-MAMBA/Programs/shuffle/shuffle.mpc')
execfile('/root/SCALE-MAMBA/Programs/test_util/test_util.mpc')

N=SED_THIS_TO_NUMBER_OF_PLAYERS 

testi=0


if(False):

	testi = new_test(testi)

	k = 5
	n = 1 << k

	elems = sint.Array(n)
	@for_range(n)
	def set_elem(i):
	    elems[i] = sint(i)

	nGates = (1 << k-1) * (2 * k - 1)
	gates = sint.Array(nGates)

	@for_range(nGates)
	def set_gate(i):
	    gates[i] = sint(1)

	shuffle(elems, gates, k)

	@for_range(n)
	def print_elem(i):
	    print_ln("shuffled[%s] = %s", i, elems[i].reveal())

if(False):

	testi = new_test(testi)

	k = 11
	n = 1 << k

	elems = sint.Array(n)
	@for_range(n)
	def set_elem(i):
	    elems[i] = sint(i)

	nGates = n*k * (1 << k-1)
	gates = sint.Array(nGates)

	@for_range(nGates)
	def set_gate(i):
	    gates[i] = sint(1)

	shuffle(elems, gates, k)

	print_ln("Complete")


if(False):
	
	testi = new_test(testi)

	k = 5
	n = 1 << k

	elems = sint.Array(n)
        data = sint.Array(n)
	@for_range(n)
	def set_elem(i):
	    elems[i] = sint(i)
            data[i] = sint(i) + cint(50)

        allIsWell = cint.Array(1)
        allIsWell[0] = cint(1)  # i.e. true

        cint.public_output(cint(26)) # Shuffle by only one player
        cint.public_output(cint(0))  # Player to shuffle
        cint.public_output(cint(k))

	shuffle_player(elems, data, k, 0, allIsWell)

        if_then(allIsWell[0])
	@for_range(n)
	def print_elem(i):
	    print_ln("shuffled[%s] = %s", i,  elems[i].reveal())
        else_then()
        print_ln("User input contains an error.")
        end_if()

if(False):

	testi = new_test(testi)

	k = 13
	elems = sint.Array(1 << k)
        data = sint.Array(1 << k)
	@for_range(1 << k)
	def set_elem(i):
	    elems[i] = sint(i)
            data[i] = sint(i)

        allIsWell = cint.Array(1)
        allIsWell[0] = cint(1)  # true

	shuffle_player(elems, data, k, 0, allIsWell)
        shuffle_player(elems, data, k, 1, allIsWell)

	print_ln("Complete")


if(False):

    testi = new_test(testi)

    k = 4
    elems = sint.Array(1 << k)
    data = sint.Array(1 << k)
    @for_range(1 << k)
    def set_elem(i):
        elems[i] = sint(i)
        data[i] = sint(i)

    shuffle_securely(elems, data, k, N)

    @for_range(1 << k)
    def reveal_and_print(i):
        print_ln("%s: %s", elems[i].reveal(), data[i].reveal())

if(True):

  testi = new_test(testi)

  k = 5
  arr0 = sint.Array(1 << k)
  arr1 = sint.Array(1 << k)
  arr2 = sint.Array(1 << k)

  for i in range(1 << k):
    arr0[i] = sint(i)
    arr1[i] = sint(i)
    arr2[i] = sint(i)

  playerToShuffle = 0
  cint.public_output(cint(26)) # Shuffle by only one player
  cint.public_output(cint(playerToShuffle))
  cint.public_output(cint(k))

  shuffle_player_3(arr0, arr1, arr2, k, playerToShuffle)

  print_ln("Results of 3-array shuffle")
  for i in range(1 << k):
    print_ln("%s, %s, %s", arr0[i].reveal(), arr1[i].reveal(), arr2[i].reveal())


