execfile('/root/SCALE-MAMBA/Programs/shuffle/shuffle.mpc')


def mux(cond, ifTrue, ifFalse):
    return ifFalse + cond*(ifTrue - ifFalse)

def cmp_swap(keys, data, i, j):
    b = (keys[i] > keys[j])
    keyDiff = keys[j] - keys[i]
    bKeyDiff = keyDiff * b
    keys[i] = keys[i] + bKeyDiff
    keys[j] = keys[j] - bKeyDiff

    dataDiff = data[j] - data[i]
    bDataDiff = b*dataDiff    
    data[i] = data[i] + bDataDiff
    data[j] = data[j] - bDataDiff

def greatestPowerOfTwoLessThan(n):
    k = 1
    while(k < n):
        k = k << 1
    return k >> 1

def logOfAPowerOfTwo(n):
    k = 0
    while (n > 1):
        k = k + 1
        n = n >> 1
    return k

# Assuming n a power of 2
def bitonic_merge(keys, data, lo, n):
    if (n > 1):
        d = logOfAPowerOfTwo(n)
        m = 1 << (d-1)
        @for_range(d)
        def loop(q):
            k = (d - 1 - q)  # k loops from d-1 to 0
            @for_range(m)
            def loop(j):
                i = (j >> k) * (1 << (k+1)) + j % (1 << k)
                cmp_swap(keys, data, i + lo, i + lo + (1 << k))


# Assuming n a power of 2
def bitonic_sort(keys, data, lo, n):
    if (n > 1):
        m = int(n/2)
        c = logOfAPowerOfTwo(n)
        @for_range(c)
        def sort_loop(d):
            @for_range(d+1)
            def loop(q):
                k = (d - q)  # k loops from d to 0
                @for_range(m)
                def loop(j):
		    # Make comparisons always in the same direction, as per:
		    # en.wikipedia.org/wiki/Bitonic_sorter#/media/File:Batcher_Bitonic_Mergesort_for_eight_inputs.svg
                    i = (j >> k) * (1 << (k+1)) + j % (1 << k)
                    i2 = mux(q==0, ((j >> k) + 1) * (1 << (k+1)) - (1 + (j % (1 << k))), i + (1 << k))
                    cmp_swap(keys, data, i, i2)

def sort_all_keys_dont_modify(keys, data, n):
    keys_clear = cint.Array(n)
    data_copy = sint.Array(n)
    @for_range(n)
    def set(i):
        keys_clear[i] = keys[i].reveal()
        data_copy[i] = data[i]

    merge_sort_clear(keys_clear, data_copy, n)
    return keys_clear, data_copy

def sort_all_keys_2(keys, data0, data1, n, n_players):
    c = logOfAPowerOfTwo(n)
    shuffle_securely_3(keys, data0, data1, c, n_players)

    keys_clear, data0_sorted = sort_all_keys_dont_modify(keys, data0, n)
    keys_clear, data1_sorted = sort_all_keys_dont_modify(keys, data1, n)

    return keys_clear, data0_sorted, data1_sorted

# Sorts data based on keys, where keys contains each possible key once
# n size of data (and number of keys) is a power of two
# threshold for the MPC system
def sort_all_keys(keys, data, n, n_players):
    c = logOfAPowerOfTwo(n)
    shuffle_securely(keys, data, c, n_players)

    keys_clear = cint.Array(n)
    @for_range(n)
    def reveal_key(i):
        keys_clear[i] = keys[i].reveal()

    merge_sort_clear(keys_clear, data, n)

    # Rather than returning arrays, we are updating in place
    #   so we also need to update keys.
    @for_range(n)
    def update_key(i):
        keys[i] = keys_clear[i]

# Sorts on public keys, private data (but locations of data are not private)
# Assumes n is power of 2
def merge_sort_clear(keys, data, n):
    merged = cint.Array(n)
    merged_data = sint.Array(n)
    c = logOfAPowerOfTwo(n)
    m = 1 << (c - 1)
    i = cint.Array(1)
    j = cint.Array(1)
    incLeft = cint.Array(1)
    @for_range(c)
    def sort_level(d):
        i[0] = cint(0)
        j[0] = cint(m)
	@for_range(n)
	def loop(k):
            if_then(((i[0] % (1 << d)) == 0)*((j[0] - i[0]) < m))
            incLeft[0] = cint(0)    # merging left is done, must merge rest of right
            else_then() 
            if_then(((j[0] % (1 << d)) == 0)*((j[0] - i[0]) > m))
            incLeft[0] = cint(1)    # merging right is done, must merge rest of left
            else_then()
            incLeft[0] = (keys[i[0]] < keys[j[0]])
            end_if()
	    end_if()
            
            if_then(incLeft[0])
            merged[k] = keys[i[0]]
            merged_data[k] = data[i[0]]
            i[0] = i[0] + cint(1)
            else_then()
            merged[k] = keys[j[0]]
            merged_data[k] = data[j[0]]
            j[0] = j[0] + cint(1)
            end_if()

        @for_range(n)
        def loop(k):
            keys[k] = merged[k]
            data[k] = merged_data[k]
        


# WARNING: This reveals the relative ordering in the input permutation
# If this is sensitive, randomly permute the input first.
# Assumes n is a power of 2
def merge_sort(keys, data, n):
    merged = sint.Array(n)
    merged_data = sint.Array(n)
    c = logOfAPowerOfTwo(n)
    m = 1 << (c - 1)
    i = cint.Array(1)
    j = cint.Array(1)
    incLeft = cint.Array(1)
    @for_range(c)
    def sort_level(d):
        i[0] = cint(0)
        j[0] = cint(m)
	@for_range(n)
	def loop(k):
            if_then(((i[0] % (1 << d)) == 0)*((j[0] - i[0]) < m))
            incLeft[0] = cint(0)    # merging left is done, must merge rest of right
            else_then() 
            if_then(((j[0] % (1 << d)) == 0)*((j[0] - i[0]) > m))
            incLeft[0] = cint(1)    # merging right is done, must merge rest of left
            else_then()
            incLeft[0] = (keys[i[0]] < keys[j[0]]).reveal()
            end_if()
	    end_if()
            
            if_then(incLeft[0])
            merged[k] = keys[i[0]]
            merged_data[k] = data[i[0]]
            i[0] = i[0] + cint(1)
            else_then()
            merged[k] = keys[j[0]]
            merged_data[k] = data[j[0]]
            j[0] = j[0] + cint(1)
            end_if()

        @for_range(n)
        def loop(k):
            keys[k] = merged[k]
            data[k] = merged_data[k]
        
