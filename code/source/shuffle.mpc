WAKSMAN_SHUFFLE = cint(25)

# This isn't quite a Waksman network. It includes the top-right element in every recursion. 
# Assumes d>1, |elems| = 2^d, and that gates \in {0, 1}^{2^d * d - 2^(d-1)}, 
#   is a setting of wires which, if the party who supplied them is honest, 
#   represents a random permutation
def shuffle(elems, gates, d):
  @for_range(2*d - 1)
  def loop(t):
    i = t + (t >=d) * (2*d -1 - 2*t)  # i = 0, ..., d-2, d-1, d-2, ... 0
    @for_range(1 << (d-1))
    def inner_loop(j):
      b = gates[(1 << (d-1)) *t + j]
      k = 2*(j >> i) + (j % (1 << i))

      # if(b) swap(elems[k], elems[k + (1 << i))
      diff = elems[k + (1 << i)] - elems[k]
      bDiff = b * diff
      elems[k] = elems[k] + bDiff
      elems[k + (1 << i)] = elems[k + (1 << i)] - bDiff


def shuffle_fixed(elems, d):
  nGates = (1 << (d-1)) * (2 * d - 1)
  gates = sint.Array(nGates)
  @for_range(nGates)
  def setGate(i):
    gates[i] = sint(1)

  shuffle(elems, gates, d)

# It seems that if statements cannot have empty else blocks. 
def do_nothing():
  w = sint(0)


# Have each person supply a Waksman permutation
# elems, data : arrays of length 2^d
# n : Number of players
def shuffle_securely(elems, data, d, n):
    m = 1 << d
    allIsWell = cint.Array(1)

    # Indicate that local IO should prepare to locally do a shuffle
    cint.public_output(WAKSMAN_SHUFFLE)
    cint.public_output(cint(d))

    for i in range(n):
        elems_new = sint.Array(m)
        data_new = sint.Array(m)
        @for_range(m)
        def copy(j):
            elems_new[j] = elems[j]
            data_new[j] = data[j]

        shuffle_player(elems_new, data_new, d, i, allIsWell)

        @for_range(m)
        def copy_back(j):
            elems[j] = elems[j] + allIsWell[0]*(elems_new[j]-elems[j])
            data[j] = data[j] + allIsWell[0]*(data_new[j]-data[j])
        print_ln("Player %s provided good input? %s", i, allIsWell[0])

def ensureValidBits(nGates, gates, allIsWell):
  check = sint.Array(1)
  @for_range(nGates)
  def check_gate(i):
    check[0] = gates[i]*(1-gates[i]) 
    # if (check.reveal() != 0), i.e. Player l cheated, input was not in {0, 1}.
    if_then(check[0].reveal()) 
    # then set to fixed value
    allIsWell[0] = cint(0)
    gates[i] = sint(1)
    else_then()
    do_nothing()
    end_if()

def getGates(nGates, l):
  gates = sint.Array(nGates)
  @for_range(nGates)
  def getGate(i):
    gates[i] = sint.get_private_input_from(l)
  return gates

def getValidGates(d, l, allIsWell):
  nGates = (2*d-1) * (1 << (d-1)) 
  gates = getGates(nGates, l)

  allIsWell[0] = cint(1)
  ensureValidBits(nGates, gates, allIsWell)

  return gates

# Allows a player to input the bits of the switches.
def shuffle_player(arr0, arr1, d, l, allIsWell):
  gates = getValidGates(d, l, allIsWell)
  shuffle(arr0, gates, d)
  shuffle(arr1, gates, d)

def shuffle_player_1(arr, d, l, allIsWell):
  gates = getValidGates(d, l, allIsWell)
  shuffle(arr, gates, d)

def shuffle_player_3(arr0, arr1, arr2, d, l):
  allIsWell = cint.Array(1)
  gates = getValidGates(d, l, allIsWell)
  shuffle(arr0, gates, d)
  shuffle(arr1, gates, d)
  shuffle(arr2, gates, d)

  
